// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"ddd-template/internal/adapters/delivery"
	"ddd-template/internal/adapters/respository"
	"ddd-template/internal/application"
	"ddd-template/internal/application/mutation"
	"ddd-template/internal/application/query"
	"ddd-template/internal/config"
	"ddd-template/internal/domain"
	"ddd-template/internal/ports/controller"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewServer(ctx context.Context, configs *config.Configs, logger *zap.Logger) (controller.HttpServer, func()) {
	db := respository.InitDBConnect(configs, logger)
	data := respository.NewData(db, logger)
	iStudentRepository := respository.NewStudentRepository(data)
	iClassRepository := respository.NewClassRepository(data)
	iClassDomainService := domain.NewClassDomainService(iClassRepository, logger)
	iStudentMutationService := mutation.NewUserMutation(iStudentRepository, iClassDomainService, logger)
	iClassMutationService := mutation.NewClassMutation(iClassRepository, logger)
	mutations := app.SetMutations(iStudentMutationService, iClassMutationService)
	iStudentQueryService := query.NewQueryStudent(iStudentRepository, iClassDomainService, logger)
	iClassQueryService := query.NewQueryClass(iClassRepository, logger)
	queries := app.SetQueries(iStudentQueryService, iClassQueryService)
	application := app.NewApplication(ctx, mutations, queries)
	server := delivery.NewServer(application)
	httpServer, cleanup := controller.NewHttpServer(server)
	return httpServer, func() {
		cleanup()
	}
}
