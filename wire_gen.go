// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"ddd-template/internal/adapters/repository"
	"ddd-template/internal/adapters/store/redis"
	"ddd-template/internal/application"
	"ddd-template/internal/config"
	"ddd-template/internal/ports/controller"
	"ddd-template/internal/ports/controller/handler"
	"ddd-template/internal/ports/controller/middleware"
	"ddd-template/internal/ports/graph"
	"ddd-template/internal/service"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func NewServer(configs *config.Configs, logger *zap.Logger) (*service.Server, func()) {
	mutations := app.SetMutations()
	queries := app.SetQueries()
	db := repository.InitDBConnect(configs, logger)
	dbData := repository.NewData(db, logger)
	store := redis_store.NewRedisStore(configs)
	appClose := app.SetClose(dbData, store)
	application, cleanup := app.NewApplication(mutations, queries, appClose)
	handlerHandler := handler.NewHandler(application)
	server := graph.NewResolver(application, logger)
	middlewareMiddleware := middleware.NewMiddleware(logger)
	httpServer := controller.NewHttpServer(handlerHandler, server, middlewareMiddleware)
	serviceServer, cleanup2 := service.NewServer(httpServer)
	return serviceServer, func() {
		cleanup2()
		cleanup()
	}
}
