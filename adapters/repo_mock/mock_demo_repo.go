// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/dependency/dep_demo.go

// Package repo_mock is a generated GoMock package.
package repo_mock

import (
	context "context"
	entities "ddd-template/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDemoInterface is a mock of DemoInterface interface.
type MockDemoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDemoInterfaceMockRecorder
}

// MockDemoInterfaceMockRecorder is the mock recorder for MockDemoInterface.
type MockDemoInterfaceMockRecorder struct {
	mock *MockDemoInterface
}

// NewMockDemoInterface creates a new mock instance.
func NewMockDemoInterface(ctrl *gomock.Controller) *MockDemoInterface {
	mock := &MockDemoInterface{ctrl: ctrl}
	mock.recorder = &MockDemoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemoInterface) EXPECT() *MockDemoInterfaceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockDemoInterface) SayHello(ctx context.Context, msg string) *entities.Demo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, msg)
	ret0, _ := ret[0].(*entities.Demo)
	return ret0
}

// SayHello indicates an expected call of SayHello.
func (mr *MockDemoInterfaceMockRecorder) SayHello(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockDemoInterface)(nil).SayHello), ctx, msg)
}
