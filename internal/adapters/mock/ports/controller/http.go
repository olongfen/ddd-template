// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./ports/controller/http.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	reflect "reflect"

	v2 "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// AddClass mocks base method.
func (m *MockServer) AddClass(ctx *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClass indicates an expected call of AddClass.
func (mr *MockServerMockRecorder) AddClass(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServer)(nil).AddClass), ctx)
}

// AddStudent mocks base method.
func (m *MockServer) AddStudent(ctx *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockServerMockRecorder) AddStudent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServer)(nil).AddStudent), ctx)
}

// Cleanup mocks base method.
func (m *MockServer) Cleanup() func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(func())
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockServerMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockServer)(nil).Cleanup))
}

// GetStudent mocks base method.
func (m *MockServer) GetStudent(ctx *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockServerMockRecorder) GetStudent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockServer)(nil).GetStudent), ctx)
}

// QueryStudents mocks base method.
func (m *MockServer) QueryStudents(ctx *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryStudents indicates an expected call of QueryStudents.
func (mr *MockServerMockRecorder) QueryStudents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockServer)(nil).QueryStudents), ctx)
}
