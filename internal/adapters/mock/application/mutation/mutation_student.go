// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./application/mutation/mutation_student.go

// Package mock_mutation is a generated GoMock package.
package mock_mutation

import (
	context "context"
	schema "ddd-template/internal/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStudentMutationService is a mock of IStudentMutationService interface.
type MockIStudentMutationService struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentMutationServiceMockRecorder
}

// MockIStudentMutationServiceMockRecorder is the mock recorder for MockIStudentMutationService.
type MockIStudentMutationServiceMockRecorder struct {
	mock *MockIStudentMutationService
}

// NewMockIStudentMutationService creates a new mock instance.
func NewMockIStudentMutationService(ctrl *gomock.Controller) *MockIStudentMutationService {
	mock := &MockIStudentMutationService{ctrl: ctrl}
	mock.recorder = &MockIStudentMutationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentMutationService) EXPECT() *MockIStudentMutationServiceMockRecorder {
	return m.recorder
}

// AddStudent mocks base method.
func (m *MockIStudentMutationService) AddStudent(ctx context.Context, form *schema.StudentAddForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudent", ctx, form)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockIStudentMutationServiceMockRecorder) AddStudent(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudent", reflect.TypeOf((*MockIStudentMutationService)(nil).AddStudent), ctx, form)
}
