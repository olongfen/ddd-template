// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./application/query/query_student.go

// Package mock_query is a generated GoMock package.
package mock_query

import (
	context "context"
	schema "ddd-template/internal/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStudentQueryService is a mock of IStudentQueryService interface.
type MockIStudentQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentQueryServiceMockRecorder
}

// MockIStudentQueryServiceMockRecorder is the mock recorder for MockIStudentQueryService.
type MockIStudentQueryServiceMockRecorder struct {
	mock *MockIStudentQueryService
}

// NewMockIStudentQueryService creates a new mock instance.
func NewMockIStudentQueryService(ctrl *gomock.Controller) *MockIStudentQueryService {
	mock := &MockIStudentQueryService{ctrl: ctrl}
	mock.recorder = &MockIStudentQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentQueryService) EXPECT() *MockIStudentQueryServiceMockRecorder {
	return m.recorder
}

// GetStudent mocks base method.
func (m *MockIStudentQueryService) GetStudent(ctx context.Context, id int) (*schema.StudentResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", ctx, id)
	ret0, _ := ret[0].(*schema.StudentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockIStudentQueryServiceMockRecorder) GetStudent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockIStudentQueryService)(nil).GetStudent), ctx, id)
}

// QueryStudents mocks base method.
func (m *MockIStudentQueryService) QueryStudents(ctx context.Context, query schema.StudentsQuery) (schema.StudentsResp, *schema.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudent", ctx, query)
	ret0, _ := ret[0].(schema.StudentsResp)
	ret1, _ := ret[1].(*schema.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryStudents indicates an expected call of QueryStudents.
func (mr *MockIStudentQueryServiceMockRecorder) QueryStudents(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudent", reflect.TypeOf((*MockIStudentQueryService)(nil).QueryStudents), ctx, query)
}
