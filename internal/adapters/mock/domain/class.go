// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./domain/class.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "ddd-template/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIClassRepository is a mock of IClassRepository interface.
type MockIClassRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIClassRepositoryMockRecorder
}

// MockIClassRepositoryMockRecorder is the mock recorder for MockIClassRepository.
type MockIClassRepositoryMockRecorder struct {
	mock *MockIClassRepository
}

// NewMockIClassRepository creates a new mock instance.
func NewMockIClassRepository(ctrl *gomock.Controller) *MockIClassRepository {
	mock := &MockIClassRepository{ctrl: ctrl}
	mock.recorder = &MockIClassRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClassRepository) EXPECT() *MockIClassRepositoryMockRecorder {
	return m.recorder
}

// AddClass mocks base method.
func (m *MockIClassRepository) AddClass(ctx context.Context, c *domain.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClass indicates an expected call of AddClass.
func (mr *MockIClassRepositoryMockRecorder) AddClass(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIClassRepository)(nil).AddClass), ctx, c)
}

// GetClassWithUuid mocks base method.
func (m *MockIClassRepository) GetClassWithUuid(ctx context.Context, uid string) (*domain.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUuid", ctx, uid)
	ret0, _ := ret[0].(*domain.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassWithUuid indicates an expected call of GetClassWithUuid.
func (mr *MockIClassRepositoryMockRecorder) GetClassWithUuid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUuid", reflect.TypeOf((*MockIClassRepository)(nil).GetClassWithUuid), ctx, uid)
}

// MockIClassDomainService is a mock of IClassDomainService interface.
type MockIClassDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockIClassDomainServiceMockRecorder
}

// MockIClassDomainServiceMockRecorder is the mock recorder for MockIClassDomainService.
type MockIClassDomainServiceMockRecorder struct {
	mock *MockIClassDomainService
}

// NewMockIClassDomainService creates a new mock instance.
func NewMockIClassDomainService(ctrl *gomock.Controller) *MockIClassDomainService {
	mock := &MockIClassDomainService{ctrl: ctrl}
	mock.recorder = &MockIClassDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClassDomainService) EXPECT() *MockIClassDomainServiceMockRecorder {
	return m.recorder
}

// GetClassDetail mocks base method.
func (m *MockIClassDomainService) GetClassDetail(ctx context.Context, uid string) (*domain.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassDetail", ctx, uid)
	ret0, _ := ret[0].(*domain.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassDetail indicates an expected call of GetClassDetail.
func (mr *MockIClassDomainServiceMockRecorder) GetClassDetail(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassDetail", reflect.TypeOf((*MockIClassDomainService)(nil).GetClassDetail), ctx, uid)
}
