// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/./domain/student.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "ddd-template/internal/domain"
	schema "ddd-template/internal/schema"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStudentRepository is a mock of IStudentRepository interface.
type MockIStudentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStudentRepositoryMockRecorder
}

// MockIStudentRepositoryMockRecorder is the mock recorder for MockIStudentRepository.
type MockIStudentRepositoryMockRecorder struct {
	mock *MockIStudentRepository
}

// NewMockIStudentRepository creates a new mock instance.
func NewMockIStudentRepository(ctrl *gomock.Controller) *MockIStudentRepository {
	mock := &MockIStudentRepository{ctrl: ctrl}
	mock.recorder = &MockIStudentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStudentRepository) EXPECT() *MockIStudentRepositoryMockRecorder {
	return m.recorder
}

// AddStudent mocks base method.
func (m *MockIStudentRepository) AddStudent(ctx context.Context, stu *domain.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudent", ctx, stu)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockIStudentRepositoryMockRecorder) AddStudent(ctx, stu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudent", reflect.TypeOf((*MockIStudentRepository)(nil).AddStudent), ctx, stu)
}

// GetStudent mocks base method.
func (m *MockIStudentRepository) GetStudent(ctx context.Context, id int) (*domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", ctx, id)
	ret0, _ := ret[0].(*domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockIStudentRepositoryMockRecorder) GetStudent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockIStudentRepository)(nil).GetStudent), ctx, id)
}

// QueryStudents mocks base method.
func (m *MockIStudentRepository) QueryStudents(ctx context.Context, query schema.StudentsQuery) ([]*domain.Student, *schema.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStudents", ctx, query)
	ret0, _ := ret[0].([]*domain.Student)
	ret1, _ := ret[1].(*schema.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryStudents indicates an expected call of QueryStudents.
func (mr *MockIStudentRepositoryMockRecorder) QueryStudents(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStudents", reflect.TypeOf((*MockIStudentRepository)(nil).QueryStudents), ctx, query)
}
