// Code generated by github.com/olongfen/protoc-gen-go-http-frame. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	response "github.com/olongfen/protoc-gen-go-http-frame/response"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the  github.com/olongfen/protoc-gen-go-http-frame package it is being compiled against.
// context.metadata.response.
//gin.

//
//
//
//
type GreeterGinHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*DemoInfo, error)

	SayHello2(context.Context, *HelloRequest) (*DemoInfo, error)
}

func RegisterGreeterGinHTTPServer(r gin.IRouter, srv GreeterGinHTTPServer) {
	s := GreeterGin{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type GreeterGin struct {
	server GreeterGinHTTPServer
	router gin.IRouter
}

func (s *GreeterGin) SayHello_0(ctx *gin.Context) {
	var in HelloRequest

	if err := ctx.ShouldBindQuery(&in); err != nil {
		response.GinError(ctx, err.Error())
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request.Context(), md)
	out, err := s.server.(GreeterGinHTTPServer).SayHello(newCtx, &in)
	if err != nil {
		response.GinError(ctx, err.Error())
		return
	}

	response.GinSuccess(ctx, out)
}

func (s *GreeterGin) SayHello2_0(ctx *gin.Context) {
	var in HelloRequest

	if err := ctx.ShouldBindQuery(&in); err != nil {
		response.GinError(ctx, err.Error())
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request.Context(), md)
	out, err := s.server.(GreeterGinHTTPServer).SayHello2(newCtx, &in)
	if err != nil {
		response.GinError(ctx, err.Error())
		return
	}

	response.GinSuccess(ctx, out)
}

func (s *GreeterGin) RegisterService() {

	s.router.Handle("GET", "/hello", s.SayHello_0)

	s.router.Handle("GET", "/hello2", s.SayHello2_0)

}
