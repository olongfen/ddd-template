// Code generated by github.com/mohuishou/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mohuishou/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
//gin.

type GreeterHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*DemoInfo, error)
}

type ErrorFunc func(ctx *gin.Context, err interface{}, status ...int)
type SuccessFunc func(ctx *gin.Context, data interface{})

type GreeterHTTPServerResp struct {
	Code    int         `json:"code"`
	Data    interface{} `json:"data"`
	Message interface{} `json:"message"`
}

var (
	defaultSuccess = func(ctx *gin.Context, data interface{}) {
		ctx.AbortWithStatusJSON(200, GreeterHTTPServerResp{Code: 0, Data: data, Message: "success"})
	}

	defaultError = func(ctx *gin.Context, err interface{}, status ...int) {
		code := 200
		if len(status) > 0 {
			code = status[0]
		}
		ctx.AbortWithStatusJSON(code, GreeterHTTPServerResp{Code: -1, Data: nil, Message: err})
	}
)

func ResetSuccess(fc SuccessFunc) {
	defaultSuccess = fc
}

func ResetError(fc ErrorFunc) {
	defaultError = fc
}

func RegisterGreeterHTTPServer(r gin.IRouter, srv GreeterHTTPServer) {
	s := Greeter{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type Greeter struct {
	server GreeterHTTPServer
	router gin.IRouter
}

func (s *Greeter) SayHello_0(ctx *gin.Context) {
	var in HelloRequest

	if err := ctx.ShouldBindQuery(&in); err != nil {
		defaultError(ctx, err.Error())
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(GreeterHTTPServer).SayHello(newCtx, &in)
	if err != nil {
		defaultError(ctx, err.Error())
		return
	}

	defaultSuccess(ctx, out)
}

func (s *Greeter) RegisterService() {

	s.router.Handle("GET", "/", s.SayHello_0)

}
