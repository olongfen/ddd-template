syntax = "proto3";

option go_package="api/v1";
package v1;


import "gogo/protobuf/gogoproto/gogo.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "demo-API"
    version: "1.0"
    contact: {
      name: "olongfen"
      url: ""
      email: "olongfen@gmail.com"
    };
  };
  schemes: [HTTP,HTTPS]
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Returned when the resource does not exist."
      schema: {
        json_schema: {
          type: STRING
        };
      };
    };
  };
  responses: {
    key: "500"
    value: {
      description: "Returned when the server failed"
      schema: {
        json_schema: {
          type: STRING
        };
      };
    };
  };
  extensions: {
    key: "x-grpc-gateway-foo";
    value {
      string_value: "bar";
    }
  }
  extensions: {
    key: "x-grpc-gateway-baz-list";
    value {
      list_value: {
        values: {
          string_value: "one";
        }
        values: {
          bool_value: true;
        }
      }
    }
  }
};



service Greeter {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
    description: "Demo"
    external_docs: {
      url: "https://github.com/grpc-ecosystem/grpc-gateway";
      description: "Find out more about EchoService";
    }
  };
  rpc SayHello(HelloRequest) returns (DemoInfo) {
    option (google.api.http) = {
      get:"/hello/{action}"
    };
    option(grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "SayHello"
      description: "SayHello"
      external_docs: {
        description: "/hello"
      }
    };
  }
}


message HelloRequest {
  string msg = 1[ (gogoproto.moretags) = 'query:"msg" form:"msg" validate:"required"', (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    required: ["msg"]
  }];
  string action = 2 [ (gogoproto.moretags) = 'uri:"action" validate:"required"', (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
    required: ["action"]
  }];
}


message DemoInfo {
  int32 id =1;
  // 创建时间
  int64 createdAt =2;
  // 更新时间
  int64 updatedAt=3;
  // 消息
  string message = 4;

}
