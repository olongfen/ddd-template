// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/v1.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty" binding:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()      { *m = HelloRequest{} }
func (*HelloRequest) ProtoMessage() {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39a831d85a350775, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type DemoInfo struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreatedAt int64 `protobuf:"varint,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt int64 `protobuf:"varint,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// 消息
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DemoInfo) Reset()      { *m = DemoInfo{} }
func (*DemoInfo) ProtoMessage() {}
func (*DemoInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39a831d85a350775, []int{1}
}
func (m *DemoInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DemoInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DemoInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DemoInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DemoInfo.Merge(m, src)
}
func (m *DemoInfo) XXX_Size() int {
	return m.Size()
}
func (m *DemoInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DemoInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DemoInfo proto.InternalMessageInfo

func (m *DemoInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DemoInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DemoInfo) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *DemoInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "v1.HelloRequest")
	proto.RegisterType((*DemoInfo)(nil), "v1.DemoInfo")
}

func init() { proto.RegisterFile("v1/v1.proto", fileDescriptor_39a831d85a350775) }

var fileDescriptor_39a831d85a350775 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0x3d, 0x6f, 0xfb, 0x44,
	0x18, 0xef, 0xd9, 0x6d, 0x9a, 0xff, 0xb5, 0x45, 0xd5, 0x2d, 0x44, 0x6e, 0xe5, 0x9c, 0x3c, 0x95,
	0xaa, 0x89, 0x93, 0x50, 0x24, 0x14, 0x10, 0xc2, 0x15, 0x6f, 0x1d, 0x90, 0xc0, 0x1d, 0x50, 0x0b,
	0xcb, 0xd9, 0x7e, 0xe2, 0x1c, 0xd8, 0x77, 0xee, 0xf9, 0x9c, 0x36, 0x99, 0x10, 0x1f, 0x21, 0x2c,
	0x88, 0x4f, 0xc0, 0x07, 0x60, 0x60, 0x64, 0x60, 0x60, 0x44, 0xb0, 0x30, 0xa1, 0x26, 0xf0, 0x01,
	0x10, 0x53, 0x47, 0x64, 0xd7, 0x49, 0xab, 0x7f, 0xa7, 0xfb, 0xbd, 0x3e, 0x7a, 0xce, 0xd6, 0xe1,
	0x9d, 0x49, 0xdf, 0x9d, 0xf4, 0xbb, 0x99, 0x92, 0x5a, 0x12, 0x63, 0xd2, 0xb7, 0x9c, 0x58, 0xc6,
	0xd2, 0xad, 0x78, 0x50, 0x8c, 0xdc, 0x92, 0x55, 0xa4, 0x42, 0x0f, 0x39, 0xeb, 0xa4, 0x3a, 0xc2,
	0x4e, 0x0c, 0xa2, 0x93, 0xdf, 0xb0, 0x38, 0x06, 0xe5, 0xca, 0x4c, 0x73, 0x29, 0x72, 0x97, 0x09,
	0x21, 0x35, 0xab, 0x70, 0x9d, 0x3e, 0x88, 0xa5, 0x8c, 0x13, 0x78, 0x9c, 0x09, 0x69, 0xa6, 0xa7,
	0xb5, 0x79, 0x58, 0x9b, 0x2c, 0xe3, 0xcf, 0xab, 0x8e, 0x87, 0x77, 0x3f, 0x82, 0x24, 0x91, 0x3e,
	0x5c, 0x17, 0x90, 0x6b, 0xd2, 0xc7, 0x66, 0x9a, 0xc7, 0x2d, 0x44, 0xd1, 0xd1, 0x8b, 0xb3, 0xf6,
	0xdc, 0x6b, 0xfc, 0x8e, 0x4a, 0xe1, 0xbf, 0xbf, 0xda, 0x24, 0xe0, 0x22, 0xe2, 0x22, 0x1e, 0x3a,
	0x0a, 0xae, 0x0b, 0xae, 0x20, 0x72, 0xfc, 0xd2, 0x72, 0x32, 0xdc, 0x7c, 0x0f, 0x52, 0x79, 0x2e,
	0x46, 0x92, 0xbc, 0x82, 0x0d, 0x1e, 0x55, 0xed, 0x2d, 0xdf, 0xe0, 0x11, 0x39, 0xc4, 0x2f, 0x42,
	0x05, 0x4c, 0x43, 0xe4, 0xe9, 0x96, 0x41, 0xd1, 0x91, 0xe9, 0x3f, 0x0a, 0xa5, 0x5b, 0x64, 0x51,
	0xed, 0x9a, 0x0f, 0xee, 0x5a, 0x20, 0x2d, 0xbc, 0x9d, 0x42, 0x9e, 0xb3, 0x18, 0x5a, 0x9b, 0xe5,
	0x3a, 0xfe, 0x8a, 0x0e, 0x7e, 0x41, 0x78, 0xfb, 0x43, 0x05, 0xa0, 0x41, 0x91, 0xcf, 0x71, 0xf3,
	0x82, 0x4d, 0xab, 0x3b, 0x90, 0xfd, 0xee, 0xa4, 0xdf, 0x7d, 0x7a, 0x1d, 0x6b, 0xb7, 0x54, 0x56,
	0xdb, 0x39, 0xee, 0xdc, 0xb3, 0xc9, 0x3a, 0x6e, 0xad, 0x91, 0xd3, 0xc4, 0x0d, 0x77, 0x5c, 0xa2,
	0x6f, 0xfe, 0xf8, 0xe7, 0x5b, 0xa3, 0x49, 0x6a, 0x66, 0x7d, 0x31, 0xf7, 0x2e, 0xc9, 0x66, 0xd9,
	0xb7, 0x3e, 0xc5, 0xed, 0x0f, 0xb8, 0x88, 0xa8, 0x2c, 0x34, 0x4d, 0xa5, 0x02, 0xca, 0x82, 0x12,
	0xbe, 0x1f, 0x8e, 0xe5, 0x05, 0xa8, 0x09, 0x0f, 0x81, 0x74, 0xc7, 0x5a, 0x67, 0xf9, 0xd0, 0x75,
	0x63, 0xae, 0xc7, 0x45, 0xd0, 0x0d, 0x65, 0xea, 0xc6, 0x2a, 0x0b, 0x3b, 0x10, 0xca, 0x7c, 0x9a,
	0x6b, 0xa8, 0x69, 0xcc, 0x34, 0xdc, 0xb0, 0xe9, 0xd9, 0x8f, 0xe6, 0xdc, 0xbb, 0x37, 0x88, 0x8b,
	0x9b, 0x11, 0xa4, 0xb2, 0xe3, 0x7d, 0x72, 0xee, 0xd8, 0xb8, 0x29, 0x13, 0x29, 0xe2, 0x11, 0x08,
	0x8b, 0xac, 0xd0, 0xbb, 0x71, 0xca, 0x78, 0x52, 0x8e, 0x1b, 0x98, 0xfd, 0x6e, 0xef, 0xd8, 0x40,
	0xc6, 0x60, 0x9f, 0x65, 0x59, 0xc2, 0xc3, 0xea, 0x5f, 0xba, 0x5f, 0xe6, 0x52, 0x0c, 0x9f, 0x29,
	0xfe, 0x5b, 0xd8, 0x3c, 0xed, 0x9d, 0x92, 0x53, 0x7c, 0xec, 0x83, 0x2e, 0x94, 0x80, 0x88, 0xde,
	0x8c, 0x41, 0x50, 0x3d, 0x06, 0xaa, 0x20, 0x97, 0x85, 0x0a, 0x81, 0x46, 0x12, 0x72, 0x2a, 0xa4,
	0xa6, 0x70, 0xcb, 0x73, 0xdd, 0x25, 0x0d, 0xbc, 0xf9, 0xbd, 0x81, 0xb6, 0xfd, 0x1e, 0x36, 0xdf,
	0xe8, 0xf5, 0xc8, 0x6b, 0xb8, 0xfd, 0xbc, 0x9c, 0x83, 0x9a, 0x80, 0xa2, 0x23, 0xc6, 0x13, 0x88,
	0x56, 0x8d, 0xab, 0x4b, 0xfc, 0x19, 0x6e, 0x04, 0xc0, 0x14, 0x28, 0xf2, 0x71, 0xd3, 0x20, 0x6f,
	0x7a, 0x85, 0x1e, 0x83, 0xd0, 0xf5, 0x4e, 0x54, 0xcb, 0xaf, 0x40, 0x9c, 0xd0, 0x4c, 0xc1, 0x88,
	0xdf, 0x42, 0x44, 0x83, 0x29, 0x3d, 0xab, 0xd2, 0xc3, 0xfa, 0xa4, 0x6f, 0x57, 0x91, 0x77, 0xac,
	0xbd, 0xb2, 0x29, 0x15, 0x9f, 0x3d, 0x14, 0x8d, 0x60, 0x17, 0xe3, 0xf5, 0xe8, 0x8d, 0xd9, 0x01,
	0x26, 0xb7, 0x9d, 0xa7, 0x5f, 0xb2, 0x33, 0x92, 0x92, 0x6c, 0x59, 0x66, 0xc0, 0xd4, 0xec, 0x08,
	0xbf, 0xfa, 0x92, 0x19, 0xb0, 0x59, 0x27, 0xe1, 0xb9, 0x26, 0x7b, 0x83, 0x1d, 0xbc, 0x65, 0x99,
	0x52, 0x00, 0x36, 0x28, 0xfa, 0x73, 0x61, 0x6f, 0xdc, 0x2d, 0x6c, 0xf4, 0xef, 0xc2, 0x46, 0xf7,
	0x0b, 0x1b, 0x7d, 0xbd, 0xb4, 0xd1, 0x0f, 0x4b, 0x1b, 0xfd, 0xb4, 0xb4, 0xd1, 0xcf, 0x4b, 0x1b,
	0xfd, 0xba, 0xb4, 0xd1, 0x6f, 0x4b, 0x1b, 0xdd, 0x2d, 0x6d, 0xf4, 0xdd, 0xdf, 0xf6, 0xc6, 0x55,
	0xa3, 0x7c, 0x41, 0x93, 0x7e, 0xd0, 0xa8, 0x5e, 0xce, 0xeb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x24, 0xf5, 0x81, 0xd9, 0x03, 0x00, 0x00,
}

func (this *HelloRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HelloRequest)
	if !ok {
		that2, ok := that.(HelloRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *HelloRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *HelloRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *HelloRequest but is not nil && this == nil")
	}
	if this.Msg != that1.Msg {
		return fmt.Errorf("Msg this(%v) Not Equal that(%v)", this.Msg, that1.Msg)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *HelloRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloRequest)
	if !ok {
		that2, ok := that.(HelloRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DemoInfo) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DemoInfo)
	if !ok {
		that2, ok := that.(DemoInfo)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DemoInfo")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DemoInfo but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DemoInfo but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.CreatedAt != that1.CreatedAt {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DemoInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DemoInfo)
	if !ok {
		that2, ok := that.(DemoInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HelloRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.HelloRequest{")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DemoInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&v1.DemoInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringV1(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*DemoInfo, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*DemoInfo, error) {
	out := new(DemoInfo)
	err := c.cc.Invoke(ctx, "/v1.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*DemoInfo, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) SayHello(ctx context.Context, req *HelloRequest) (*DemoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/v1.proto",
}

func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintV1(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DemoInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemoInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DemoInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintV1(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintV1(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.CreatedAt != 0 {
		i = encodeVarintV1(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintV1(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedHelloRequest(r randyV1, easy bool) *HelloRequest {
	this := &HelloRequest{}
	this.Msg = string(randStringV1(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedV1(r, 2)
	}
	return this
}

func NewPopulatedDemoInfo(r randyV1, easy bool) *DemoInfo {
	this := &DemoInfo{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.Message = string(randStringV1(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedV1(r, 5)
	}
	return this
}

type randyV1 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneV1(r randyV1) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringV1(r randyV1) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneV1(r)
	}
	return string(tmps)
}
func randUnrecognizedV1(r randyV1, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldV1(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldV1(dAtA []byte, r randyV1, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateV1(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateV1(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateV1(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateV1(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateV1(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateV1(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateV1(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DemoInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovV1(uint64(m.Id))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovV1(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovV1(uint64(m.UpdatedAt))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozV1(x uint64) (n int) {
	return sovV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HelloRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloRequest{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DemoInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DemoInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`UpdatedAt:` + fmt.Sprintf("%v", this.UpdatedAt) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringV1(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemoInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemoInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemoInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupV1 = fmt.Errorf("proto: unexpected end of group")
)
