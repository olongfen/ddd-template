// Code generated by github.com/olongfen/protoc-gen-go-http-frame. DO NOT EDIT.

package v1

import (
	context "context"
	v2 "github.com/gofiber/fiber/v2"
	response "github.com/olongfen/protoc-gen-go-http-frame/response"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the  github.com/olongfen/protoc-gen-go-http-frame package it is being compiled against.
// context.metadata.response.
//v2.

//
//
type GreeterFiberHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*DemoInfo, error)
}

func RegisterGreeterFiberHTTPServer(r v2.Router, srv GreeterFiberHTTPServer) {
	s := GreeterFiber{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type GreeterFiber struct {
	server GreeterFiberHTTPServer
	router v2.Router
}

func (s *GreeterFiber) SayHello_0(ctx *v2.Ctx) error {
	var in HelloRequest
	if err := ctx.ParamsParser(&in); err != nil {
		return response.FiberRespFailFunc(ctx, err.Error())
	}

	if err := ctx.QueryParser(&in); err != nil {
		return response.FiberRespFailFunc(ctx, err.Error())
	}

	md := metadata.New(nil)
	for k, v := range ctx.GetReqHeaders() {
		md.Set(k, v)
	}
	newCtx := metadata.NewIncomingContext(ctx.Context(), md)
	out, err := s.server.(GreeterFiberHTTPServer).SayHello(newCtx, &in)
	if err != nil {
		return response.FiberRespFailFunc(ctx, err.Error())
	}

	return response.FiberRespSuccessFunc(ctx, out)
}

func (s *GreeterFiber) RegisterService() {

	s.router.Add("GET", "/hello/:action", s.SayHello_0)

}
